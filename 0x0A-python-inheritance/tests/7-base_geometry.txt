     >>> BG = __import__("7-base_geometry").BaseGeometry

Checking for area failure:
	 >>> b = BG()
	 >>> b.area()
	 Traceback (most recent call last):
	 ...
	 Exception: area() is not implemented

Checking too many arguments for area:
	 >>> b.area(1)
	 Traceback (most recent call last):
         ...
	 TypeError: BaseGeometry.area() takes 1 positional argument but 2 were given

Checking integer validator for passing integer:
	 >>> b.integer_validator("integer", 1)

Checking for integer == 0:
	 >>> b.integer_validator("integer", 0)
	 Traceback (most recent call last):
         ...
         ValueError: integer must be greater than 0

Checking for integer < 0;
	 >>> b.integer_validator("integer", -5)
	 Traceback (most recent call last):
         ...
         ValueError: integer must be greater than 0

Checking for non-integer types:
	 >>> b.integer_validator("bool", True)
	 Traceback (most recent call last):
         ...
         TypeError: bool must be an integer
	 >>> b.integer_validator("float", 1.5)
         Traceback (most recent call last):
         ...
         TypeError: float must be an integer
	 >>> b.integer_validator("complex", complex(1, 1))
         Traceback (most recent call last):
         ...
         TypeError: complex must be an integer
	 >>> b.integer_validator("string", "hello")
         Traceback (most recent call last):
         ...
         TypeError: string must be an integer
	 >>> b.integer_validator("tuple", (1, 2))
         Traceback (most recent call last):
         ...
         TypeError: tuple must be an integer
	 >>> b.integer_validator("list", [1, 2, 3])
	 Traceback (most recent call last):
         ...
         TypeError: list must be an integer
	 >>> b.integer_validator("dict", {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: dict must be an integer
	 >>> b.integer_validator("set", {"hello", "world"})
         Traceback (most recent call last):
         ...
         TypeError: set must be an integer
	 >>> b.integer_validator("frozenset", frozenset(["hello", "world"]))
         Traceback (most recent call last):
         ...
         TypeError: frozenset must be an integer
	 >>> b.integer_validator("bytes", b"bytes")
         Traceback (most recent call last):
         ...
         TypeError: bytes must be an integer
	 >>> b.integer_validator("bytearrays", bytearray(b"bytes"))
         Traceback (most recent call last):
         ...
         TypeError: bytearrays must be an integer
